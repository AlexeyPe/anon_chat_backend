const express = require('express')
const http = require('http')
const socket = require('socket.io')

const app = express();
const server = http.createServer(app)
const io = socket(server)
app.use(express.json())

const port = process.env.PORT || 3000;

app.get('/', (req:any, res:any) => res.json({hi: "!"}));

app.get('/getUserName/:id', (req:any, res:any) => {
    const id = Number(req.params.id)
    // console.log(`getUserName, id:${id}, Number(req.params.id):${Number(req.params.id)}`)
    if (Number.isNaN(id)) {
        res.status(400)
    } else {
        res.json({userName: getUserName(id)})
    }
})

app.get('/getMessages', (req:any, res:any) => {
    if (db.has("messages")) {
        const result = db.get("messages").map((item:any) => {
            item.userName = getUserName(item.id)
            return item
        })
        res.json({messages: result})
    } else {
        db.set("messages", [])
        res.json({messages: []})
    }
})

app.post('/delteAllMessages', (req:any, res:any) => {
    db.set("messages", [])
    res.status(200).json('success')
    io.sockets.emit("updateMessages", [])
})

app.post('/createMessage', (req:any, res:any) => {
	const messages = db.get("messages")
    messages.push({
		id: req.body.id,
		message: req.body.message,
		dateUTC: new Date().getTime()
	});
    res.status(200).json('success')
    io.sockets.emit("updateMessages", db.get("messages").map((item:any) => {
        item.userName = getUserName(item.id)
        return item
    }))
})

io.on('connection', () => { 
    // console.log(`cliet connection ü§ù`)
});

// app.listen(port, () => console.log(`Server running on ${port}, http://localhost:${port}`));
server.listen(port, () => {
    console.log(`Server running on ${port}, http://localhost:${port}`)
})

// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—Å—å –±—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ –≤ –ø–∞–º—è—Ç–∏.
// –ù–æ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–º–æ-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –º—ã –±—É–¥–µ–º —Ö–∏—Ç—Ä–∏—Ç—å!
// (–ú–Ω–µ –Ω—É–∂–Ω–æ –∑–∞—Ö–æ—Å—Ç–∏—Ç—å –Ω–∞ vercel, —Ç–∞–º –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å docker –∏ —Å—É–±–¥)
const db = new Map();

function getUserName(id:number):string {
    if (db.has(id)) {
        return db.get(id).userName 
    } else {
        const x = ['–∫—Ä–∞—Å–Ω–∞—è', '—Å–∏–Ω—è—è', '–∑–µ–ª—ë–Ω–∞—è', '–±–µ–ª–∞—è', '—á—ë—Ä–Ω–∞—è', '–æ—Ä–∞–Ω–∂–µ–≤–∞—è', '–∑–æ–ª–æ—Ç–∞—è', '–≥–æ–ª—É–±–∞—è', '–∂—ë–ª—Ç–∞—è']
        const y = ['—á–µ—Ä–µ–ø–∞—Ö–∞', '–æ–±–µ–∑—å—è–Ω–∞', '—Å–æ–±–∞–∫–∞', '–∞–∫—É–ª–∞', '—Ä—ã–±–∞', '–ø–∞–Ω–¥–∞', '–ª–∞–º–∞', '–∑–º–µ—è']
        db.set(id, {userName: `${x[Math.floor(Math.random() * x.length)]} ${y[Math.floor(Math.random() * y.length)]}`})
        return db.get(id).userName
    }
}
